# -*- mode: python ; coding: utf-8 -*-
import sys
import os

# --- Get Version ---
# Read the version string from the _version.py file, which is
# generated by setuptools-scm during the `pip install` step.
# Get the absolute path to the directory containing this .spec file.
# SPECPATH is a global variable provided by PyInstaller representing the spec file's directory.
SPEC_DIR = SPECPATH
version_file_path = os.path.join(SPEC_DIR, '_version.py')

try:
    # A more robust way to get the version is to execute the file
    # and read the __version__ variable.
    version_globals = {}
    with open(version_file_path, 'r') as f:
        exec(f.read(), version_globals)
    version_str = version_globals['__version__']
except (FileNotFoundError, KeyError) as e:
    print(f"Build Warning: Could not read version from _version.py ({e}). Using fallback.")
    # This fallback is a clear indicator that the `pip install` step was missed.
    version_str = "0.0.0-manual"

# --- Analysis ---
# This section tells PyInstaller what files to include.
a = Analysis(
    ['gui.py'],
    pathex=[SPEC_DIR], # Ensure the project root is in the path
    binaries=[],
    # We explicitly add the _version.py file and the 'samples/gemini_voices' directory
    # to ensure they are included in the final executable.
    datas=[(version_file_path, '.'), (os.path.join(SPEC_DIR, 'samples', 'gemini_voices'), 'samples/gemini_voices')],
    hiddenimports=[],
    hookspath=[],
    hooksconfig={},
    runtime_hooks=[],
    excludes=[],
    win_no_prefer_redirects=False,
    win_private_assemblies=False,
    cipher=None,
    noarchive=False,
)
pyz = PYZ(a.pure, a.zipped_data, cipher=None)

# --- Executable ---
# This defines the main executable file.
exe = EXE(
    pyz,
    a.scripts,
    [],
    exclude_binaries=True,
    name='Podcast Generator',
    debug=False,
    bootloader_ignore_signals=False,
    strip=False,
    upx=True,
    runtime_tmpdir=None,
    console=False,
    windowed=True,
    disable_windowed_traceback=False,
    target_arch=None,
    codesign_identity=None,
    entitlements_file=None,
    icon=os.path.join(SPEC_DIR, 'podcast.ico')  # Icon for Windows
)

# --- Platform-specific output ---
if sys.platform == 'darwin':
    # On macOS, we create a .app bundle.
    coll = COLLECT(exe, a.binaries, a.zipfiles, a.datas, strip=False, upx=True, upx_exclude=[], name='Podcast Generator')
    app = BUNDLE(
        coll,
        name='Podcast Generator.app',
        icon=os.path.join(SPEC_DIR, 'podcast.icns'),
        bundle_identifier='com.laurentftech.podcastgenerator',
        info_plist={
            # CFBundleShortVersionString should be the clean version (e.g., "1.5.0")
            'CFBundleShortVersionString': version_str.split('.dev')[0].split('+')[0],
            # CFBundleVersion can be the full, detailed version string
            'CFBundleVersion': version_str,
            'NSHighResolutionCapable': 'True'
        }
    )
else:
    # On Windows and Linux, we collect the files into a simple directory.
    coll = COLLECT(
        exe,
        a.binaries,
        a.zipfiles,
        a.datas,
        strip=False,
        upx=True,
        upx_exclude=[],
        name='Podcast Generator'
    )
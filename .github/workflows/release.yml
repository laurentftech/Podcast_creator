name: Release Multi-Platform

permissions:
  contents: write

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build-arm64:
    name: Build macOS ARM64
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      - name: Install dependencies
        run: |
          pip install -e .
          pip install pyinstaller

      - name: Convert PNG to ICNS
        run: sips -s format icns podcast.png --out podcast.icns

      - name: Build executable ARM64
        run: pyinstaller --name="Podcast Generator" --windowed --icon=podcast.icns gui.py

      - name: Restore code signing certificate
        run: |
          echo "${{ secrets.CERT_P12_BASE64 }}" | base64 --decode > cert.p12
          security create-keychain -p "" build.keychain
          security import cert.p12 -k build.keychain -P "" -T /usr/bin/codesign
          security list-keychains -d user -s build.keychain
          security unlock-keychain -p "" build.keychain
          security default-keychain -s build.keychain
          security set-keychain-settings -t 3600 -u build.keychain
          
      - name: Sign the app
        run: |
          codesign -vvv --deep --force --sign "LaurentFTech Self-Signed" --timestamp --options runtime dist/Podcast\ Generator.app
          xattr -dr com.apple.quarantine dist/Podcast\ Generator.app

      - name: Package ARM64 zip
        run: zip -r Podcast_Generator_${{ github.ref_name }}_MacOS_arm64.zip dist/Podcast\ Generator.app

      - name: Upload ARM64 artifact
        uses: actions/upload-artifact@v4
        with:
          name: arm64-zip
          path: Podcast_Generator_${{ github.ref_name }}_MacOS_arm64.zip

  build-intel:
    name: Build macOS Intel
    runs-on: [self-hosted, macos, x64]
    steps:
      - uses: actions/checkout@v3

      - name: Check Python version
        run: python3 --version

      - name: Install dependencies
        run: |
          pip3 install -e .
          pip3 install --user pyinstaller

      - name: Convert PNG to ICNS
        run: sips -s format icns podcast.png --out podcast.icns

      - name: Build executable Intel
        run: pyinstaller --name="Podcast Generator" --windowed --icon=podcast.icns gui.py

      - name: Restore code signing certificate
        run: |
          echo "${{ secrets.CERT_P12_BASE64 }}" | base64 --decode > cert.p12
          security create-keychain -p "" build.keychain
          security import cert.p12 -k build.keychain -P "" -T /usr/bin/codesign
          security list-keychains -d user -s build.keychain
          security unlock-keychain -p "" build.keychain
          security default-keychain -s build.keychain
          security set-keychain-settings -t 3600 -u build.keychain

      - name: Sign the app
        run: |
          codesign -vvv --deep --force --sign "LaurentFTech Self-Signed" --timestamp --options runtime dist/Podcast\ Generator.app
          xattr -dr com.apple.quarantine dist/Podcast\ Generator.app

      - name: Package Intel zip
        run: zip -r Podcast_Generator_${{ github.ref_name }}_MacOS_x86_64.zip dist/Podcast\ Generator.app

      - name: Upload Intel artifact
        uses: actions/upload-artifact@v4
        with:
          name: intel-zip
          path: Podcast_Generator_${{ github.ref_name }}_MacOS_x86_64.zip

  build-windows:
    name: Build Windows
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install ImageMagick
        run: choco install imagemagick -y

      - name: Convert PNG to ICO
        run: magick convert podcast.png -define icon:auto-resize=256,128,64,48,32,16 podcast.ico

      - name: Install Python dependencies
        run: |
          pip install -e .
          pip install pyinstaller

      - name: Build Windows executable
        run: pyinstaller --name="Podcast Generator" --windowed --icon=podcast.ico gui.py

      - name: Package Windows build
        run: powershell -Command "Compress-Archive -Path 'dist/Podcast Generator' -DestinationPath 'Podcast_Generator_${{ github.ref_name }}_windows.zip'"

      - name: Upload Windows ZIP artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-zip
          path: Podcast_Generator_${{ github.ref_name }}_windows.zip

  build-linux:
    name: Build Linux
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      - name: Install dependencies
        run: |
          pip install -e .
          pip install pyinstaller

      - name: Build executable Linux
        run: pyinstaller --name="Podcast Generator" --windowed gui.py

      - name: Package Linux zip
        run: zip -r Podcast_Generator_${{ github.ref_name }}_linux.zip dist/Podcast\ Generator

      - name: Upload Linux artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-zip
          path: Podcast_Generator_${{ github.ref_name }}_linux.zip

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-arm64, build-intel, build-windows, build-linux]
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create GitHub Release and Upload Assets
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          files: |
            artifacts/arm64-zip/*.zip
            artifacts/intel-zip/*.zip
            artifacts/windows-zip/*.zip
            artifacts/linux-zip/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
